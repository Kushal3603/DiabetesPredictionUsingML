{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\firstapp\\\\frontend\\\\src\\\\Test.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import './Test.css'\n// import { Questions } from \"./Questions\";\n\n// var ped;\n\n// function predictWithMLModel(inputData) {\n//   fetch('http://127.0.0.1:5000/predict', {\n//       method: 'POST',\n//       headers: {\n//           'Content-Type': 'application/json'\n//       },\n//       body: JSON.stringify(inputData)\n//   })\n//   .then(response => response.json())\n//   .then(predictions => {\n//       // Handle the predictions received from the Flask backend\n//       ped = predictions;\n//       console.log('Predictions: by heet ', predictions);\n//   })\n//   .catch(error => {\n//       console.error('Error:', error);\n//   });\n\n//   return ped;\n// }\n\n// const inputData = [2, 100, 72, 100, 33.6,50];\n\n// function Test() {\n//   predictWithMLModel(inputData);\n//   const [index, setIndex] = useState(0);\n//   const [question, setQuestion] = useState(Questions[index]);\n//   const [selectedAnswer, setSelectedAnswer] = useState(null);\n//   const [floatInput, setFloatInput] = useState(0);\n//   const [result, setResult] = useState(false);\n//   const [isAnswered, setIsAnswered] = useState(false);\n\n//   useEffect(() => {\n//     setQuestion(Questions[index]);\n//     setIsAnswered(false);\n//     setSelectedAnswer(null);\n//   }, [index]);\n\n//   useEffect(() => {\n//     setIndex(0);\n//   }, []);\n\n//   const checkAns = (ans) => {\n//     setSelectedAnswer(ans);\n//     setIsAnswered(true);\n//   };\n\n//   const handleFloatInput = (e) => {\n//     setFloatInput(parseFloat(e.target.value));\n//     setIsAnswered(true); \n//   };\n\n//   const reset = () => {\n//     setIndex(0);\n//     setSelectedAnswer(null);\n//     setFloatInput(0);\n//     setResult(false);\n//   };\n\n//   const next = () => {\n\n//     if (index === Questions.length - 1) {\n//       setResult(true);\n//       return;\n//     }\n//     setIndex(prevIndex => prevIndex + 1);\n//   };\n\n//   const prev = () => {\n//     if (index > 0) {\n//       setIndex(prevIndex => prevIndex - 1);\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h1>Diabetes Prediction Test</h1>\n//       <hr />\n//       {result ? (\n//         <>\n//           <h2>Test is submitted successfully</h2>\n//           <h2>Congrats you have diabetes</h2>\n//           <h2>with prob {ped}</h2>\n//           <button className=\"reset\" onClick={reset}>Reset</button>\n//         </>\n//       ) : (\n//         <>\n//           {index === 0 ? (\n//             <>\n//               <h2>{index+1}. {question.question}</h2>\n//               <input\n//                 type=\"range\"\n//                 min={0}\n//                 max={200}\n//                 step={0.1}\n//                 value={floatInput}\n//                 onChange={handleFloatInput}\n//               />\n//               <p>Value: {floatInput.toFixed(1)} kg</p>\n//               <button className=\"next\" onClick={next} disabled={!isAnswered}>Next</button>\n//               <div className=\"index\">{index+1} of {Questions.length} questions</div>\n//             </>\n//           ) : (\n//             <>\n//               <h2>{index+1}. {question.question}</h2>\n//               <ul>\n//                 {Object.keys(question).filter(key => key.startsWith(\"option\")).map((option, i) => (\n//                   <li\n//                     key={option}\n//                     className={selectedAnswer === i + 1 ? \"selected\" : \"\"}\n//                     onClick={() => checkAns(i + 1)}\n//                   >\n//                     {question[option]}\n//                   </li>\n//                 ))}\n//               </ul>\n//               <button className=\"prev\" onClick={prev}>Previous</button>\n//               <button className=\"next\" onClick={next} disabled={!isAnswered}>Next</button>\n//               <div className=\"index\">{index+1} of {Questions.length} questions</div>\n//               {selectedAnswer !== null }\n//             </>\n//           )}\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Test;\n\n// import React, { useState, useEffect } from \"react\";\n// import './Test.css'\n// import { Questions } from \"./Questions\";\n\n// function Test() {\n//   const [index, setIndex] = useState(0);\n//   const [question, setQuestion] = useState(Questions[index]);\n//   const [sliderValue, setSliderValue] = useState(0);\n//   const [responses, setResponses] = useState([]);\n//   const [result, setResult] = useState(false);\n\n//   useEffect(() => {\n//     setQuestion(Questions[index]);\n//     setSliderValue(0); // Reset slider value when question changes\n//   }, [index]);\n\n//   const handleSliderChange = (e) => {\n//     setSliderValue(parseFloat(e.target.value));\n//   };\n\n//   const reset = () => {\n//     setIndex(0);\n//     setResponses([]);\n//     setResult(false);\n//   };\n\n//   const next = () => {\n//     if (index === Questions.length - 1) {\n//       setResult(true);\n//       // Send responses to Flask app\n//       fetch('http://127.0.0.1:5000/predict', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(responses)\n//       })\n//       .then(response => response.json())\n//       .then(predictions => {\n//         console.log('Predictions:', predictions);\n//         // Handle predictions\n//       })\n//       .catch(error => {\n//         console.error('Error:', error);\n//       });\n//       return;\n//     }\n//     setResponses(prevResponses => [...prevResponses, sliderValue]);\n//     setIndex(prevIndex => prevIndex + 1);\n//   };\n\n//   const prev = () => {\n//     if (index > 0) {\n//       setIndex(prevIndex => prevIndex - 1);\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h1>Diabetes Prediction Test</h1>\n//       <hr />\n//       {result ? (\n//         <>\n//           <h2>Test is submitted successfully</h2>\n//           <button className=\"reset\" onClick={reset}>Reset</button>\n//         </>\n//       ) : (\n//         <>\n//           <h2>{index+1}. {question.question}</h2>\n//           <input\n//             type=\"range\"\n//             min={0}\n//             max={200}\n//             step={0.1}\n//             value={sliderValue}\n//             onChange={handleSliderChange}\n//           />\n//           <p>Value: {sliderValue.toFixed(1)}</p>\n//           <button className=\"prev\" onClick={prev}>Previous</button>\n//           <button className=\"next\" onClick={next}>Next</button>\n//           <div className=\"index\">{index+1} of {Questions.length} questions</div>\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Test;\n\nimport React, { useState, useEffect } from \"react\";\nimport './Test.css';\nimport { Questions } from \"./Questions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction predictWithMLModel(inputData) {\n  return fetch('http://127.0.0.1:5000/predict', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(inputData)\n  }).then(response => response.json()).then(predictions => {\n    console.log('Predictions: ', predictions);\n    return predictions;\n  }).catch(error => {\n    console.error('Error:', error);\n    return null;\n  });\n}\nconst inputData = [2, 100, 72, 100, 33.6, 50];\nfunction Test() {\n  _s();\n  const [predictions, setPredictions] = useState(null);\n  const [index, setIndex] = useState(0);\n  const [question, setQuestion] = useState(Questions[index]);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [slider0Value, setSlider0Value] = useState(0);\n  const [slider4Value, setSlider4Value] = useState(0);\n  const [slider6Value, setSlider6Value] = useState(0);\n  const [result, setResult] = useState(false);\n  const [isAnswered, setIsAnswered] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      const predictions = await predictWithMLModel(inputData);\n      setPredictions(predictions);\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    setQuestion(Questions[index]);\n    setIsAnswered(false);\n    setSelectedAnswer(null);\n  }, [index]);\n  const checkAns = ans => {\n    setSelectedAnswer(ans);\n    setIsAnswered(true);\n  };\n  const handleSlider0Change = e => {\n    setSlider0Value(parseFloat(e.target.value));\n    setIsAnswered(true);\n  };\n  const handleSlider4Change = e => {\n    setSlider4Value(parseFloat(e.target.value));\n    setIsAnswered(true);\n  };\n  const handleSlider6Change = e => {\n    setSlider6Value(parseFloat(e.target.value));\n    setIsAnswered(true);\n  };\n  const reset = () => {\n    setIndex(0);\n    setSelectedAnswer(null);\n    setSlider0Value(0);\n    setSlider4Value(0);\n    setSlider6Value(0);\n    setResult(false);\n  };\n  const next = () => {\n    if (index === Questions.length - 1) {\n      setResult(true);\n      return;\n    }\n    setIndex(prevIndex => prevIndex + 1);\n    setSlider0Value(0); // Reset the slider value to 0\n    setSlider4Value(0);\n    setSlider6Value(0);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navigation\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"#\",\n        children: \"News\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"#\",\n        children: \"Feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"#\",\n        children: \"About\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"loginbtn\",\n        onClick: toggleDropdown,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Diabetes Prediction Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 7\n      }, this), result ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Test is submitted successfully\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Congrats you have diabetes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"with prob \", predictions]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset\",\n          onClick: reset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [index + 1, \". \", question.question]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this), index === 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"slider\",\n            type: \"range\",\n            min: 0,\n            max: 100,\n            value: slider0Value,\n            onChange: handleSlider0Change\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Value: \", slider0Value, \" years\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), index === 4 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"slider\",\n            type: \"range\",\n            min: 0,\n            max: 300,\n            value: slider4Value,\n            onChange: handleSlider4Change\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Value: \", slider4Value, \" mg/dL\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), index === 6 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"slider\",\n            type: \"range\",\n            min: 0,\n            step: 0.1,\n            max: 100,\n            value: slider6Value,\n            onChange: handleSlider6Change\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Value: \", slider6Value]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: Object.keys(question).filter(key => key.startsWith(\"option\")).map((option, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: selectedAnswer === i + 1 ? \"selected\" : \"\",\n            onClick: () => checkAns(i + 1),\n            children: question[option]\n          }, option, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this), index !== 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"prev\",\n          onClick: () => setIndex(prevIndex => prevIndex - 1),\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"next\",\n          onClick: next,\n          disabled: !isAnswered,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"index\",\n          children: [index + 1, \" of \", Questions.length, \" questions\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this), selectedAnswer !== null]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(Test, \"amgFjrVPI9DrhVSk2geUoF9VYgw=\");\n_c = Test;\nexport default Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","useState","useEffect","Questions","jsxDEV","_jsxDEV","Fragment","_Fragment","predictWithMLModel","inputData","fetch","method","headers","body","JSON","stringify","then","response","json","predictions","console","log","catch","error","Test","_s","setPredictions","index","setIndex","question","setQuestion","selectedAnswer","setSelectedAnswer","slider0Value","setSlider0Value","slider4Value","setSlider4Value","slider6Value","setSlider6Value","result","setResult","isAnswered","setIsAnswered","fetchData","checkAns","ans","handleSlider0Change","e","parseFloat","target","value","handleSlider4Change","handleSlider6Change","reset","next","length","prevIndex","children","className","Link","to","fileName","_jsxFileName","lineNumber","columnNumber","onClick","toggleDropdown","type","min","max","onChange","step","Object","keys","filter","key","startsWith","map","option","i","disabled","_c","$RefreshReg$"],"sources":["D:/project/firstapp/frontend/src/Test.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import './Test.css'\r\n// import { Questions } from \"./Questions\";\r\n\r\n// var ped;\r\n\r\n// function predictWithMLModel(inputData) {\r\n//   fetch('http://127.0.0.1:5000/predict', {\r\n//       method: 'POST',\r\n//       headers: {\r\n//           'Content-Type': 'application/json'\r\n//       },\r\n//       body: JSON.stringify(inputData)\r\n//   })\r\n//   .then(response => response.json())\r\n//   .then(predictions => {\r\n//       // Handle the predictions received from the Flask backend\r\n//       ped = predictions;\r\n//       console.log('Predictions: by heet ', predictions);\r\n//   })\r\n//   .catch(error => {\r\n//       console.error('Error:', error);\r\n//   });\r\n\r\n//   return ped;\r\n// }\r\n\r\n\r\n// const inputData = [2, 100, 72, 100, 33.6,50];\r\n\r\n// function Test() {\r\n//   predictWithMLModel(inputData);\r\n//   const [index, setIndex] = useState(0);\r\n//   const [question, setQuestion] = useState(Questions[index]);\r\n//   const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n//   const [floatInput, setFloatInput] = useState(0);\r\n//   const [result, setResult] = useState(false);\r\n//   const [isAnswered, setIsAnswered] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     setQuestion(Questions[index]);\r\n//     setIsAnswered(false);\r\n//     setSelectedAnswer(null);\r\n//   }, [index]);\r\n\r\n//   useEffect(() => {\r\n//     setIndex(0);\r\n//   }, []);\r\n\r\n//   const checkAns = (ans) => {\r\n//     setSelectedAnswer(ans);\r\n//     setIsAnswered(true);\r\n//   };\r\n\r\n//   const handleFloatInput = (e) => {\r\n//     setFloatInput(parseFloat(e.target.value));\r\n//     setIsAnswered(true); \r\n//   };\r\n\r\n//   const reset = () => {\r\n//     setIndex(0);\r\n//     setSelectedAnswer(null);\r\n//     setFloatInput(0);\r\n//     setResult(false);\r\n//   };\r\n\r\n//   const next = () => {\r\n\r\n//     if (index === Questions.length - 1) {\r\n//       setResult(true);\r\n//       return;\r\n//     }\r\n//     setIndex(prevIndex => prevIndex + 1);\r\n//   };\r\n\r\n//   const prev = () => {\r\n//     if (index > 0) {\r\n//       setIndex(prevIndex => prevIndex - 1);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h1>Diabetes Prediction Test</h1>\r\n//       <hr />\r\n//       {result ? (\r\n//         <>\r\n//           <h2>Test is submitted successfully</h2>\r\n//           <h2>Congrats you have diabetes</h2>\r\n//           <h2>with prob {ped}</h2>\r\n//           <button className=\"reset\" onClick={reset}>Reset</button>\r\n//         </>\r\n//       ) : (\r\n//         <>\r\n//           {index === 0 ? (\r\n//             <>\r\n//               <h2>{index+1}. {question.question}</h2>\r\n//               <input\r\n//                 type=\"range\"\r\n//                 min={0}\r\n//                 max={200}\r\n//                 step={0.1}\r\n//                 value={floatInput}\r\n//                 onChange={handleFloatInput}\r\n//               />\r\n//               <p>Value: {floatInput.toFixed(1)} kg</p>\r\n//               <button className=\"next\" onClick={next} disabled={!isAnswered}>Next</button>\r\n//               <div className=\"index\">{index+1} of {Questions.length} questions</div>\r\n//             </>\r\n//           ) : (\r\n//             <>\r\n//               <h2>{index+1}. {question.question}</h2>\r\n//               <ul>\r\n//                 {Object.keys(question).filter(key => key.startsWith(\"option\")).map((option, i) => (\r\n//                   <li\r\n//                     key={option}\r\n//                     className={selectedAnswer === i + 1 ? \"selected\" : \"\"}\r\n//                     onClick={() => checkAns(i + 1)}\r\n//                   >\r\n//                     {question[option]}\r\n//                   </li>\r\n//                 ))}\r\n//               </ul>\r\n//               <button className=\"prev\" onClick={prev}>Previous</button>\r\n//               <button className=\"next\" onClick={next} disabled={!isAnswered}>Next</button>\r\n//               <div className=\"index\">{index+1} of {Questions.length} questions</div>\r\n//               {selectedAnswer !== null }\r\n//             </>\r\n//           )}\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Test;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import './Test.css'\r\n// import { Questions } from \"./Questions\";\r\n\r\n// function Test() {\r\n//   const [index, setIndex] = useState(0);\r\n//   const [question, setQuestion] = useState(Questions[index]);\r\n//   const [sliderValue, setSliderValue] = useState(0);\r\n//   const [responses, setResponses] = useState([]);\r\n//   const [result, setResult] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     setQuestion(Questions[index]);\r\n//     setSliderValue(0); // Reset slider value when question changes\r\n//   }, [index]);\r\n\r\n//   const handleSliderChange = (e) => {\r\n//     setSliderValue(parseFloat(e.target.value));\r\n//   };\r\n\r\n//   const reset = () => {\r\n//     setIndex(0);\r\n//     setResponses([]);\r\n//     setResult(false);\r\n//   };\r\n\r\n//   const next = () => {\r\n//     if (index === Questions.length - 1) {\r\n//       setResult(true);\r\n//       // Send responses to Flask app\r\n//       fetch('http://127.0.0.1:5000/predict', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json'\r\n//         },\r\n//         body: JSON.stringify(responses)\r\n//       })\r\n//       .then(response => response.json())\r\n//       .then(predictions => {\r\n//         console.log('Predictions:', predictions);\r\n//         // Handle predictions\r\n//       })\r\n//       .catch(error => {\r\n//         console.error('Error:', error);\r\n//       });\r\n//       return;\r\n//     }\r\n//     setResponses(prevResponses => [...prevResponses, sliderValue]);\r\n//     setIndex(prevIndex => prevIndex + 1);\r\n//   };\r\n\r\n//   const prev = () => {\r\n//     if (index > 0) {\r\n//       setIndex(prevIndex => prevIndex - 1);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h1>Diabetes Prediction Test</h1>\r\n//       <hr />\r\n//       {result ? (\r\n//         <>\r\n//           <h2>Test is submitted successfully</h2>\r\n//           <button className=\"reset\" onClick={reset}>Reset</button>\r\n//         </>\r\n//       ) : (\r\n//         <>\r\n//           <h2>{index+1}. {question.question}</h2>\r\n//           <input\r\n//             type=\"range\"\r\n//             min={0}\r\n//             max={200}\r\n//             step={0.1}\r\n//             value={sliderValue}\r\n//             onChange={handleSliderChange}\r\n//           />\r\n//           <p>Value: {sliderValue.toFixed(1)}</p>\r\n//           <button className=\"prev\" onClick={prev}>Previous</button>\r\n//           <button className=\"next\" onClick={next}>Next</button>\r\n//           <div className=\"index\">{index+1} of {Questions.length} questions</div>\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Test;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport './Test.css'\r\nimport { Questions } from \"./Questions\";\r\n\r\nfunction predictWithMLModel(inputData) {\r\n\r\n  return fetch('http://127.0.0.1:5000/predict', {\r\n      method: 'POST',\r\n      headers: {\r\n          'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(inputData)\r\n  })\r\n  .then(response => response.json())\r\n  .then(predictions => {\r\n      console.log('Predictions: ', predictions);\r\n      return predictions;\r\n  })\r\n  .catch(error => {\r\n      console.error('Error:', error);\r\n      return null;\r\n  });\r\n}\r\n\r\nconst inputData = [2, 100, 72, 100, 33.6, 50];\r\n\r\nfunction Test() {\r\n  const [predictions, setPredictions] = useState(null);\r\n  const [index, setIndex] = useState(0);\r\n  const [question, setQuestion] = useState(Questions[index]);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [slider0Value, setSlider0Value] = useState(0);\r\n  const [slider4Value, setSlider4Value] = useState(0);\r\n  const [slider6Value, setSlider6Value] = useState(0);\r\n  const [result, setResult] = useState(false);\r\n  const [isAnswered, setIsAnswered] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const predictions = await predictWithMLModel(inputData);\r\n      setPredictions(predictions);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setQuestion(Questions[index]);\r\n    setIsAnswered(false);\r\n    setSelectedAnswer(null);\r\n  }, [index]);\r\n\r\n  const checkAns = (ans) => {\r\n    setSelectedAnswer(ans);\r\n    setIsAnswered(true);\r\n  };\r\n\r\n  const handleSlider0Change = (e) => {\r\n    setSlider0Value(parseFloat(e.target.value));\r\n    setIsAnswered(true); \r\n  };\r\n\r\n  const handleSlider4Change = (e) => {\r\n    setSlider4Value(parseFloat(e.target.value));\r\n    setIsAnswered(true); \r\n  };\r\n\r\n  const handleSlider6Change = (e) => {\r\n    setSlider6Value(parseFloat(e.target.value));\r\n    setIsAnswered(true); \r\n  };\r\n\r\n  const reset = () => {\r\n    setIndex(0);\r\n    setSelectedAnswer(null);\r\n    setSlider0Value(0);\r\n    setSlider4Value(0);\r\n    setSlider6Value(0);\r\n    setResult(false);\r\n  };\r\n\r\n  const next = () => {\r\n    if (index === Questions.length - 1) {\r\n      setResult(true);\r\n      return;\r\n    }\r\n    setIndex(prevIndex => prevIndex + 1);\r\n    setSlider0Value(0); // Reset the slider value to 0\r\n    setSlider4Value(0);\r\n    setSlider6Value(0);\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <nav className=\"navigation\">\r\n          <Link to=\"/\">Home</Link>\r\n          <Link to=\"#\">News</Link>\r\n          <Link to=\"#\">Feedback</Link>\r\n          <Link to=\"#\">About</Link>\r\n          <button className=\"loginbtn\" onClick={toggleDropdown}>Login</button>\r\n        </nav>\r\n    <div className=\"container\">\r\n      <h1>Diabetes Prediction Test</h1>\r\n      <hr />\r\n      {result ? (\r\n        <>\r\n          <h2>Test is submitted successfully</h2>\r\n          <h2>Congrats you have diabetes</h2>\r\n          <h2>with prob {predictions}</h2>\r\n          <button className=\"reset\" onClick={reset}>Reset</button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h2>{index+1}. {question.question}</h2>\r\n          {(index === 0) && (\r\n            <>\r\n              <input\r\n                className=\"slider\"\r\n                type=\"range\"\r\n                min={0}\r\n                max={100}\r\n                value={slider0Value}\r\n                onChange={handleSlider0Change}\r\n              />\r\n              <p>Value: {slider0Value} years</p>\r\n            </>\r\n          )}\r\n          {(index === 4) && (\r\n            <>\r\n              <input\r\n                className=\"slider\"\r\n                type=\"range\"\r\n                min={0}\r\n                max={300}\r\n                value={slider4Value}\r\n                onChange={handleSlider4Change}\r\n              />\r\n              <p>Value: {slider4Value} mg/dL</p>\r\n            </>\r\n          )}\r\n          {(index === 6) && (\r\n            <>\r\n              <input\r\n                className=\"slider\"\r\n                type=\"range\"\r\n                min={0}\r\n                step={0.1}\r\n                max={100}\r\n                value={slider6Value}\r\n                onChange={handleSlider6Change}\r\n              />\r\n              <p>Value: {slider6Value}</p>\r\n            </>\r\n          )}\r\n          <ul>\r\n            {Object.keys(question).filter(key => key.startsWith(\"option\")).map((option, i) => (\r\n              <li\r\n                key={option}\r\n                className={selectedAnswer === i + 1 ? \"selected\" : \"\"}\r\n                onClick={() => checkAns(i + 1)}\r\n              >\r\n                {question[option]}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          {index !== 0 && (\r\n            <button className=\"prev\" onClick={() => setIndex(prevIndex => prevIndex - 1)}>Previous</button>\r\n          )}\r\n          <button className=\"next\" onClick={next} disabled={!isAnswered}>Next</button>\r\n          <div className=\"index\">{index+1} of {Questions.length} questions</div>\r\n          {selectedAnswer !== null }\r\n        </>\r\n      )}\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Test;\r\n\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,YAAY;AACnB,SAASC,SAAS,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExC,SAASC,kBAAkBA,CAACC,SAAS,EAAE;EAErC,OAAOC,KAAK,CAAC,+BAA+B,EAAE;IAC1CC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,SAAS;EAClC,CAAC,CAAC,CACDO,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,WAAW,IAAI;IACjBC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,WAAW,CAAC;IACzC,OAAOA,WAAW;EACtB,CAAC,CAAC,CACDG,KAAK,CAACC,KAAK,IAAI;IACZH,OAAO,CAACG,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,OAAO,IAAI;EACf,CAAC,CAAC;AACJ;AAEA,MAAMd,SAAS,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC;AAE7C,SAASe,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM,CAACN,WAAW,EAAEO,cAAc,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAAC0B,KAAK,EAAEC,QAAQ,CAAC,GAAG3B,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAAC4B,QAAQ,EAAEC,WAAW,CAAC,GAAG7B,QAAQ,CAACE,SAAS,CAACwB,KAAK,CAAC,CAAC;EAC1D,MAAM,CAACI,cAAc,EAAEC,iBAAiB,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACgC,YAAY,EAAEC,eAAe,CAAC,GAAGjC,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACkC,YAAY,EAAEC,eAAe,CAAC,GAAGnC,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACoC,YAAY,EAAEC,eAAe,CAAC,GAAGrC,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACsC,MAAM,EAAEC,SAAS,CAAC,GAAGvC,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACwC,UAAU,EAAEC,aAAa,CAAC,GAAGzC,QAAQ,CAAC,KAAK,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd,MAAMyC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMxB,WAAW,GAAG,MAAMX,kBAAkB,CAACC,SAAS,CAAC;MACvDiB,cAAc,CAACP,WAAW,CAAC;IAC7B,CAAC;IACDwB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAENzC,SAAS,CAAC,MAAM;IACd4B,WAAW,CAAC3B,SAAS,CAACwB,KAAK,CAAC,CAAC;IAC7Be,aAAa,CAAC,KAAK,CAAC;IACpBV,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC,EAAE,CAACL,KAAK,CAAC,CAAC;EAEX,MAAMiB,QAAQ,GAAIC,GAAG,IAAK;IACxBb,iBAAiB,CAACa,GAAG,CAAC;IACtBH,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMI,mBAAmB,GAAIC,CAAC,IAAK;IACjCb,eAAe,CAACc,UAAU,CAACD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC;IAC3CR,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMS,mBAAmB,GAAIJ,CAAC,IAAK;IACjCX,eAAe,CAACY,UAAU,CAACD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC;IAC3CR,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMU,mBAAmB,GAAIL,CAAC,IAAK;IACjCT,eAAe,CAACU,UAAU,CAACD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC;IAC3CR,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMW,KAAK,GAAGA,CAAA,KAAM;IAClBzB,QAAQ,CAAC,CAAC,CAAC;IACXI,iBAAiB,CAAC,IAAI,CAAC;IACvBE,eAAe,CAAC,CAAC,CAAC;IAClBE,eAAe,CAAC,CAAC,CAAC;IAClBE,eAAe,CAAC,CAAC,CAAC;IAClBE,SAAS,CAAC,KAAK,CAAC;EAClB,CAAC;EAED,MAAMc,IAAI,GAAGA,CAAA,KAAM;IACjB,IAAI3B,KAAK,KAAKxB,SAAS,CAACoD,MAAM,GAAG,CAAC,EAAE;MAClCf,SAAS,CAAC,IAAI,CAAC;MACf;IACF;IACAZ,QAAQ,CAAC4B,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;IACpCtB,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;IACpBE,eAAe,CAAC,CAAC,CAAC;IAClBE,eAAe,CAAC,CAAC,CAAC;EACpB,CAAC;EAED,oBACEjC,OAAA,CAAAE,SAAA;IAAAkD,QAAA,gBACApD,OAAA;MAAKqD,SAAS,EAAC,YAAY;MAAAD,QAAA,gBACrBpD,OAAA,CAACsD,IAAI;QAACC,EAAE,EAAC,GAAG;QAAAH,QAAA,EAAC;MAAI;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACxB3D,OAAA,CAACsD,IAAI;QAACC,EAAE,EAAC,GAAG;QAAAH,QAAA,EAAC;MAAI;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACxB3D,OAAA,CAACsD,IAAI;QAACC,EAAE,EAAC,GAAG;QAAAH,QAAA,EAAC;MAAQ;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC5B3D,OAAA,CAACsD,IAAI;QAACC,EAAE,EAAC,GAAG;QAAAH,QAAA,EAAC;MAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACzB3D,OAAA;QAAQqD,SAAS,EAAC,UAAU;QAACO,OAAO,EAAEC,cAAe;QAAAT,QAAA,EAAC;MAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjE,CAAC,eACV3D,OAAA;MAAKqD,SAAS,EAAC,WAAW;MAAAD,QAAA,gBACxBpD,OAAA;QAAAoD,QAAA,EAAI;MAAwB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjC3D,OAAA;QAAAwD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EACLzB,MAAM,gBACLlC,OAAA,CAAAE,SAAA;QAAAkD,QAAA,gBACEpD,OAAA;UAAAoD,QAAA,EAAI;QAA8B;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACvC3D,OAAA;UAAAoD,QAAA,EAAI;QAA0B;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnC3D,OAAA;UAAAoD,QAAA,GAAI,YAAU,EAACtC,WAAW;QAAA;UAAA0C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAChC3D,OAAA;UAAQqD,SAAS,EAAC,OAAO;UAACO,OAAO,EAAEZ,KAAM;UAAAI,QAAA,EAAC;QAAK;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,eACxD,CAAC,gBAEH3D,OAAA,CAAAE,SAAA;QAAAkD,QAAA,gBACEpD,OAAA;UAAAoD,QAAA,GAAK9B,KAAK,GAAC,CAAC,EAAC,IAAE,EAACE,QAAQ,CAACA,QAAQ;QAAA;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACrCrC,KAAK,KAAK,CAAC,iBACXtB,OAAA,CAAAE,SAAA;UAAAkD,QAAA,gBACEpD,OAAA;YACEqD,SAAS,EAAC,QAAQ;YAClBS,IAAI,EAAC,OAAO;YACZC,GAAG,EAAE,CAAE;YACPC,GAAG,EAAE,GAAI;YACTnB,KAAK,EAAEjB,YAAa;YACpBqC,QAAQ,EAAExB;UAAoB;YAAAe,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/B,CAAC,eACF3D,OAAA;YAAAoD,QAAA,GAAG,SAAO,EAACxB,YAAY,EAAC,QAAM;UAAA;YAAA4B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA,eAClC,CACH,EACCrC,KAAK,KAAK,CAAC,iBACXtB,OAAA,CAAAE,SAAA;UAAAkD,QAAA,gBACEpD,OAAA;YACEqD,SAAS,EAAC,QAAQ;YAClBS,IAAI,EAAC,OAAO;YACZC,GAAG,EAAE,CAAE;YACPC,GAAG,EAAE,GAAI;YACTnB,KAAK,EAAEf,YAAa;YACpBmC,QAAQ,EAAEnB;UAAoB;YAAAU,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/B,CAAC,eACF3D,OAAA;YAAAoD,QAAA,GAAG,SAAO,EAACtB,YAAY,EAAC,QAAM;UAAA;YAAA0B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA,eAClC,CACH,EACCrC,KAAK,KAAK,CAAC,iBACXtB,OAAA,CAAAE,SAAA;UAAAkD,QAAA,gBACEpD,OAAA;YACEqD,SAAS,EAAC,QAAQ;YAClBS,IAAI,EAAC,OAAO;YACZC,GAAG,EAAE,CAAE;YACPG,IAAI,EAAE,GAAI;YACVF,GAAG,EAAE,GAAI;YACTnB,KAAK,EAAEb,YAAa;YACpBiC,QAAQ,EAAElB;UAAoB;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/B,CAAC,eACF3D,OAAA;YAAAoD,QAAA,GAAG,SAAO,EAACpB,YAAY;UAAA;YAAAwB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA,eAC5B,CACH,eACD3D,OAAA;UAAAoD,QAAA,EACGe,MAAM,CAACC,IAAI,CAAC5C,QAAQ,CAAC,CAAC6C,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,MAAM,EAAEC,CAAC,kBAC3E1E,OAAA;YAEEqD,SAAS,EAAE3B,cAAc,KAAKgD,CAAC,GAAG,CAAC,GAAG,UAAU,GAAG,EAAG;YACtDd,OAAO,EAAEA,CAAA,KAAMrB,QAAQ,CAACmC,CAAC,GAAG,CAAC,CAAE;YAAAtB,QAAA,EAE9B5B,QAAQ,CAACiD,MAAM;UAAC,GAJZA,MAAM;YAAAjB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAKT,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,EACJrC,KAAK,KAAK,CAAC,iBACVtB,OAAA;UAAQqD,SAAS,EAAC,MAAM;UAACO,OAAO,EAAEA,CAAA,KAAMrC,QAAQ,CAAC4B,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAE;UAAAC,QAAA,EAAC;QAAQ;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAC/F,eACD3D,OAAA;UAAQqD,SAAS,EAAC,MAAM;UAACO,OAAO,EAAEX,IAAK;UAAC0B,QAAQ,EAAE,CAACvC,UAAW;UAAAgB,QAAA,EAAC;QAAI;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC5E3D,OAAA;UAAKqD,SAAS,EAAC,OAAO;UAAAD,QAAA,GAAE9B,KAAK,GAAC,CAAC,EAAC,MAAI,EAACxB,SAAS,CAACoD,MAAM,EAAC,YAAU;QAAA;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACrEjC,cAAc,KAAK,IAAI;MAAA,eACxB,CACH;IAAA;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA,eACJ,CAAC;AAEP;AAACvC,EAAA,CArJQD,IAAI;AAAAyD,EAAA,GAAJzD,IAAI;AAuJb,eAAeA,IAAI;AAAC,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}