{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import './Test.css'\n// import { Questions } from \"./Questions\";\n\n// var ped;\n\n// function predictWithMLModel(inputData) {\n//   fetch('http://127.0.0.1:5000/predict', {\n//       method: 'POST',\n//       headers: {\n//           'Content-Type': 'application/json'\n//       },\n//       body: JSON.stringify(inputData)\n//   })\n//   .then(response => response.json())\n//   .then(predictions => {\n//       // Handle the predictions received from the Flask backend\n//       ped = predictions;\n//       console.log('Predictions: by heet ', predictions);\n//   })\n//   .catch(error => {\n//       console.error('Error:', error);\n//   });\n\n//   return ped;\n// }\n\n// const inputData = [2, 100, 72, 100, 33.6,50];\n\n// function Test() {\n//   predictWithMLModel(inputData);\n//   const [index, setIndex] = useState(0);\n//   const [question, setQuestion] = useState(Questions[index]);\n//   const [selectedAnswer, setSelectedAnswer] = useState(null);\n//   const [floatInput, setFloatInput] = useState(0);\n//   const [result, setResult] = useState(false);\n//   const [isAnswered, setIsAnswered] = useState(false);\n\n//   useEffect(() => {\n//     setQuestion(Questions[index]);\n//     setIsAnswered(false);\n//     setSelectedAnswer(null);\n//   }, [index]);\n\n//   useEffect(() => {\n//     setIndex(0);\n//   }, []);\n\n//   const checkAns = (ans) => {\n//     setSelectedAnswer(ans);\n//     setIsAnswered(true);\n//   };\n\n//   const handleFloatInput = (e) => {\n//     setFloatInput(parseFloat(e.target.value));\n//     setIsAnswered(true); \n//   };\n\n//   const reset = () => {\n//     setIndex(0);\n//     setSelectedAnswer(null);\n//     setFloatInput(0);\n//     setResult(false);\n//   };\n\n//   const next = () => {\n\n//     if (index === Questions.length - 1) {\n//       setResult(true);\n//       return;\n//     }\n//     setIndex(prevIndex => prevIndex + 1);\n//   };\n\n//   const prev = () => {\n//     if (index > 0) {\n//       setIndex(prevIndex => prevIndex - 1);\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h1>Diabetes Prediction Test</h1>\n//       <hr />\n//       {result ? (\n//         <>\n//           <h2>Test is submitted successfully</h2>\n//           <h2>Congrats you have diabetes</h2>\n//           <h2>with prob {ped}</h2>\n//           <button className=\"reset\" onClick={reset}>Reset</button>\n//         </>\n//       ) : (\n//         <>\n//           {index === 0 ? (\n//             <>\n//               <h2>{index+1}. {question.question}</h2>\n//               <input\n//                 type=\"range\"\n//                 min={0}\n//                 max={200}\n//                 step={0.1}\n//                 value={floatInput}\n//                 onChange={handleFloatInput}\n//               />\n//               <p>Value: {floatInput.toFixed(1)} kg</p>\n//               <button className=\"next\" onClick={next} disabled={!isAnswered}>Next</button>\n//               <div className=\"index\">{index+1} of {Questions.length} questions</div>\n//             </>\n//           ) : (\n//             <>\n//               <h2>{index+1}. {question.question}</h2>\n//               <ul>\n//                 {Object.keys(question).filter(key => key.startsWith(\"option\")).map((option, i) => (\n//                   <li\n//                     key={option}\n//                     className={selectedAnswer === i + 1 ? \"selected\" : \"\"}\n//                     onClick={() => checkAns(i + 1)}\n//                   >\n//                     {question[option]}\n//                   </li>\n//                 ))}\n//               </ul>\n//               <button className=\"prev\" onClick={prev}>Previous</button>\n//               <button className=\"next\" onClick={next} disabled={!isAnswered}>Next</button>\n//               <div className=\"index\">{index+1} of {Questions.length} questions</div>\n//               {selectedAnswer !== null }\n//             </>\n//           )}\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Test;\n\n// import React, { useState, useEffect } from \"react\";\n// import './Test.css'\n// import { Questions } from \"./Questions\";\n\n// function Test() {\n//   const [index, setIndex] = useState(0);\n//   const [question, setQuestion] = useState(Questions[index]);\n//   const [sliderValue, setSliderValue] = useState(0);\n//   const [responses, setResponses] = useState([]);\n//   const [result, setResult] = useState(false);\n\n//   useEffect(() => {\n//     setQuestion(Questions[index]);\n//     setSliderValue(0); // Reset slider value when question changes\n//   }, [index]);\n\n//   const handleSliderChange = (e) => {\n//     setSliderValue(parseFloat(e.target.value));\n//   };\n\n//   const reset = () => {\n//     setIndex(0);\n//     setResponses([]);\n//     setResult(false);\n//   };\n\n//   const next = () => {\n//     if (index === Questions.length - 1) {\n//       setResult(true);\n//       // Send responses to Flask app\n//       fetch('http://127.0.0.1:5000/predict', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(responses)\n//       })\n//       .then(response => response.json())\n//       .then(predictions => {\n//         console.log('Predictions:', predictions);\n//         // Handle predictions\n//       })\n//       .catch(error => {\n//         console.error('Error:', error);\n//       });\n//       return;\n//     }\n//     setResponses(prevResponses => [...prevResponses, sliderValue]);\n//     setIndex(prevIndex => prevIndex + 1);\n//   };\n\n//   const prev = () => {\n//     if (index > 0) {\n//       setIndex(prevIndex => prevIndex - 1);\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h1>Diabetes Prediction Test</h1>\n//       <hr />\n//       {result ? (\n//         <>\n//           <h2>Test is submitted successfully</h2>\n//           <button className=\"reset\" onClick={reset}>Reset</button>\n//         </>\n//       ) : (\n//         <>\n//           <h2>{index+1}. {question.question}</h2>\n//           <input\n//             type=\"range\"\n//             min={0}\n//             max={200}\n//             step={0.1}\n//             value={sliderValue}\n//             onChange={handleSliderChange}\n//           />\n//           <p>Value: {sliderValue.toFixed(1)}</p>\n//           <button className=\"prev\" onClick={prev}>Previous</button>\n//           <button className=\"next\" onClick={next}>Next</button>\n//           <div className=\"index\">{index+1} of {Questions.length} questions</div>\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Test;","map":{"version":3,"names":[],"sources":["D:/project/firstapp/frontend/src/Test.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import './Test.css'\r\n// import { Questions } from \"./Questions\";\r\n\r\n// var ped;\r\n\r\n// function predictWithMLModel(inputData) {\r\n//   fetch('http://127.0.0.1:5000/predict', {\r\n//       method: 'POST',\r\n//       headers: {\r\n//           'Content-Type': 'application/json'\r\n//       },\r\n//       body: JSON.stringify(inputData)\r\n//   })\r\n//   .then(response => response.json())\r\n//   .then(predictions => {\r\n//       // Handle the predictions received from the Flask backend\r\n//       ped = predictions;\r\n//       console.log('Predictions: by heet ', predictions);\r\n//   })\r\n//   .catch(error => {\r\n//       console.error('Error:', error);\r\n//   });\r\n\r\n//   return ped;\r\n// }\r\n\r\n\r\n// const inputData = [2, 100, 72, 100, 33.6,50];\r\n\r\n// function Test() {\r\n//   predictWithMLModel(inputData);\r\n//   const [index, setIndex] = useState(0);\r\n//   const [question, setQuestion] = useState(Questions[index]);\r\n//   const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n//   const [floatInput, setFloatInput] = useState(0);\r\n//   const [result, setResult] = useState(false);\r\n//   const [isAnswered, setIsAnswered] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     setQuestion(Questions[index]);\r\n//     setIsAnswered(false);\r\n//     setSelectedAnswer(null);\r\n//   }, [index]);\r\n\r\n//   useEffect(() => {\r\n//     setIndex(0);\r\n//   }, []);\r\n\r\n//   const checkAns = (ans) => {\r\n//     setSelectedAnswer(ans);\r\n//     setIsAnswered(true);\r\n//   };\r\n\r\n//   const handleFloatInput = (e) => {\r\n//     setFloatInput(parseFloat(e.target.value));\r\n//     setIsAnswered(true); \r\n//   };\r\n\r\n//   const reset = () => {\r\n//     setIndex(0);\r\n//     setSelectedAnswer(null);\r\n//     setFloatInput(0);\r\n//     setResult(false);\r\n//   };\r\n\r\n//   const next = () => {\r\n\r\n//     if (index === Questions.length - 1) {\r\n//       setResult(true);\r\n//       return;\r\n//     }\r\n//     setIndex(prevIndex => prevIndex + 1);\r\n//   };\r\n\r\n//   const prev = () => {\r\n//     if (index > 0) {\r\n//       setIndex(prevIndex => prevIndex - 1);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h1>Diabetes Prediction Test</h1>\r\n//       <hr />\r\n//       {result ? (\r\n//         <>\r\n//           <h2>Test is submitted successfully</h2>\r\n//           <h2>Congrats you have diabetes</h2>\r\n//           <h2>with prob {ped}</h2>\r\n//           <button className=\"reset\" onClick={reset}>Reset</button>\r\n//         </>\r\n//       ) : (\r\n//         <>\r\n//           {index === 0 ? (\r\n//             <>\r\n//               <h2>{index+1}. {question.question}</h2>\r\n//               <input\r\n//                 type=\"range\"\r\n//                 min={0}\r\n//                 max={200}\r\n//                 step={0.1}\r\n//                 value={floatInput}\r\n//                 onChange={handleFloatInput}\r\n//               />\r\n//               <p>Value: {floatInput.toFixed(1)} kg</p>\r\n//               <button className=\"next\" onClick={next} disabled={!isAnswered}>Next</button>\r\n//               <div className=\"index\">{index+1} of {Questions.length} questions</div>\r\n//             </>\r\n//           ) : (\r\n//             <>\r\n//               <h2>{index+1}. {question.question}</h2>\r\n//               <ul>\r\n//                 {Object.keys(question).filter(key => key.startsWith(\"option\")).map((option, i) => (\r\n//                   <li\r\n//                     key={option}\r\n//                     className={selectedAnswer === i + 1 ? \"selected\" : \"\"}\r\n//                     onClick={() => checkAns(i + 1)}\r\n//                   >\r\n//                     {question[option]}\r\n//                   </li>\r\n//                 ))}\r\n//               </ul>\r\n//               <button className=\"prev\" onClick={prev}>Previous</button>\r\n//               <button className=\"next\" onClick={next} disabled={!isAnswered}>Next</button>\r\n//               <div className=\"index\">{index+1} of {Questions.length} questions</div>\r\n//               {selectedAnswer !== null }\r\n//             </>\r\n//           )}\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Test;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import './Test.css'\r\n// import { Questions } from \"./Questions\";\r\n\r\n// function Test() {\r\n//   const [index, setIndex] = useState(0);\r\n//   const [question, setQuestion] = useState(Questions[index]);\r\n//   const [sliderValue, setSliderValue] = useState(0);\r\n//   const [responses, setResponses] = useState([]);\r\n//   const [result, setResult] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     setQuestion(Questions[index]);\r\n//     setSliderValue(0); // Reset slider value when question changes\r\n//   }, [index]);\r\n\r\n//   const handleSliderChange = (e) => {\r\n//     setSliderValue(parseFloat(e.target.value));\r\n//   };\r\n\r\n//   const reset = () => {\r\n//     setIndex(0);\r\n//     setResponses([]);\r\n//     setResult(false);\r\n//   };\r\n\r\n//   const next = () => {\r\n//     if (index === Questions.length - 1) {\r\n//       setResult(true);\r\n//       // Send responses to Flask app\r\n//       fetch('http://127.0.0.1:5000/predict', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json'\r\n//         },\r\n//         body: JSON.stringify(responses)\r\n//       })\r\n//       .then(response => response.json())\r\n//       .then(predictions => {\r\n//         console.log('Predictions:', predictions);\r\n//         // Handle predictions\r\n//       })\r\n//       .catch(error => {\r\n//         console.error('Error:', error);\r\n//       });\r\n//       return;\r\n//     }\r\n//     setResponses(prevResponses => [...prevResponses, sliderValue]);\r\n//     setIndex(prevIndex => prevIndex + 1);\r\n//   };\r\n\r\n//   const prev = () => {\r\n//     if (index > 0) {\r\n//       setIndex(prevIndex => prevIndex - 1);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h1>Diabetes Prediction Test</h1>\r\n//       <hr />\r\n//       {result ? (\r\n//         <>\r\n//           <h2>Test is submitted successfully</h2>\r\n//           <button className=\"reset\" onClick={reset}>Reset</button>\r\n//         </>\r\n//       ) : (\r\n//         <>\r\n//           <h2>{index+1}. {question.question}</h2>\r\n//           <input\r\n//             type=\"range\"\r\n//             min={0}\r\n//             max={200}\r\n//             step={0.1}\r\n//             value={sliderValue}\r\n//             onChange={handleSliderChange}\r\n//           />\r\n//           <p>Value: {sliderValue.toFixed(1)}</p>\r\n//           <button className=\"prev\" onClick={prev}>Previous</button>\r\n//           <button className=\"next\" onClick={next}>Next</button>\r\n//           <div className=\"index\">{index+1} of {Questions.length} questions</div>\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Test;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}