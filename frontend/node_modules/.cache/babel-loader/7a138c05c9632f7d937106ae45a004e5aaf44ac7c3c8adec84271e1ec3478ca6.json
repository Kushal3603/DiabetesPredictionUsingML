{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\firstapp\\\\frontend\\\\src\\\\Test.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import './Test.css'\n// import { Questions } from \"./Questions\";\n\n// var ped;\n\n// function predictWithMLModel(inputData) {\n//   fetch('http://127.0.0.1:5000/predict', {\n//       method: 'POST',\n//       headers: {\n//           'Content-Type': 'application/json'\n//       },\n//       body: JSON.stringify(inputData)\n//   })\n//   .then(response => response.json())\n//   .then(predictions => {\n//       // Handle the predictions received from the Flask backend\n//       ped = predictions;\n//       console.log('Predictions: by heet ', predictions);\n//   })\n//   .catch(error => {\n//       console.error('Error:', error);\n//   });\n\n//   return ped;\n// }\n\n// const inputData = [2, 100, 72, 100, 33.6,50];\n\n// function Test() {\n//   predictWithMLModel(inputData);\n//   const [index, setIndex] = useState(0);\n//   const [question, setQuestion] = useState(Questions[index]);\n//   const [selectedAnswer, setSelectedAnswer] = useState(null);\n//   const [floatInput, setFloatInput] = useState(0);\n//   const [result, setResult] = useState(false);\n//   const [isAnswered, setIsAnswered] = useState(false);\n\n//   useEffect(() => {\n//     setQuestion(Questions[index]);\n//     setIsAnswered(false);\n//     setSelectedAnswer(null);\n//   }, [index]);\n\n//   useEffect(() => {\n//     setIndex(0);\n//   }, []);\n\n//   const checkAns = (ans) => {\n//     setSelectedAnswer(ans);\n//     setIsAnswered(true);\n//   };\n\n//   const handleFloatInput = (e) => {\n//     setFloatInput(parseFloat(e.target.value));\n//     setIsAnswered(true); \n//   };\n\n//   const reset = () => {\n//     setIndex(0);\n//     setSelectedAnswer(null);\n//     setFloatInput(0);\n//     setResult(false);\n//   };\n\n//   const next = () => {\n\n//     if (index === Questions.length - 1) {\n//       setResult(true);\n//       return;\n//     }\n//     setIndex(prevIndex => prevIndex + 1);\n//   };\n\n//   const prev = () => {\n//     if (index > 0) {\n//       setIndex(prevIndex => prevIndex - 1);\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h1>Diabetes Prediction Test</h1>\n//       <hr />\n//       {result ? (\n//         <>\n//           <h2>Test is submitted successfully</h2>\n//           <h2>Congrats you have diabetes</h2>\n//           <h2>with prob {ped}</h2>\n//           <button className=\"reset\" onClick={reset}>Reset</button>\n//         </>\n//       ) : (\n//         <>\n//           {index === 0 ? (\n//             <>\n//               <h2>{index+1}. {question.question}</h2>\n//               <input\n//                 type=\"range\"\n//                 min={0}\n//                 max={200}\n//                 step={0.1}\n//                 value={floatInput}\n//                 onChange={handleFloatInput}\n//               />\n//               <p>Value: {floatInput.toFixed(1)} kg</p>\n//               <button className=\"next\" onClick={next} disabled={!isAnswered}>Next</button>\n//               <div className=\"index\">{index+1} of {Questions.length} questions</div>\n//             </>\n//           ) : (\n//             <>\n//               <h2>{index+1}. {question.question}</h2>\n//               <ul>\n//                 {Object.keys(question).filter(key => key.startsWith(\"option\")).map((option, i) => (\n//                   <li\n//                     key={option}\n//                     className={selectedAnswer === i + 1 ? \"selected\" : \"\"}\n//                     onClick={() => checkAns(i + 1)}\n//                   >\n//                     {question[option]}\n//                   </li>\n//                 ))}\n//               </ul>\n//               <button className=\"prev\" onClick={prev}>Previous</button>\n//               <button className=\"next\" onClick={next} disabled={!isAnswered}>Next</button>\n//               <div className=\"index\">{index+1} of {Questions.length} questions</div>\n//               {selectedAnswer !== null }\n//             </>\n//           )}\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Test;\n\n// import React, { useState, useEffect } from \"react\";\n// import './Test.css'\n// import { Questions } from \"./Questions\";\n\n// function Test() {\n//   const [index, setIndex] = useState(0);\n//   const [question, setQuestion] = useState(Questions[index]);\n//   const [sliderValue, setSliderValue] = useState(0);\n//   const [responses, setResponses] = useState([]);\n//   const [result, setResult] = useState(false);\n\n//   useEffect(() => {\n//     setQuestion(Questions[index]);\n//     setSliderValue(0); // Reset slider value when question changes\n//   }, [index]);\n\n//   const handleSliderChange = (e) => {\n//     setSliderValue(parseFloat(e.target.value));\n//   };\n\n//   const reset = () => {\n//     setIndex(0);\n//     setResponses([]);\n//     setResult(false);\n//   };\n\n//   const next = () => {\n//     if (index === Questions.length - 1) {\n//       setResult(true);\n//       // Send responses to Flask app\n//       fetch('http://127.0.0.1:5000/predict', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(responses)\n//       })\n//       .then(response => response.json())\n//       .then(predictions => {\n//         console.log('Predictions:', predictions);\n//         // Handle predictions\n//       })\n//       .catch(error => {\n//         console.error('Error:', error);\n//       });\n//       return;\n//     }\n//     setResponses(prevResponses => [...prevResponses, sliderValue]);\n//     setIndex(prevIndex => prevIndex + 1);\n//   };\n\n//   const prev = () => {\n//     if (index > 0) {\n//       setIndex(prevIndex => prevIndex - 1);\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h1>Diabetes Prediction Test</h1>\n//       <hr />\n//       {result ? (\n//         <>\n//           <h2>Test is submitted successfully</h2>\n//           <button className=\"reset\" onClick={reset}>Reset</button>\n//         </>\n//       ) : (\n//         <>\n//           <h2>{index+1}. {question.question}</h2>\n//           <input\n//             type=\"range\"\n//             min={0}\n//             max={200}\n//             step={0.1}\n//             value={sliderValue}\n//             onChange={handleSliderChange}\n//           />\n//           <p>Value: {sliderValue.toFixed(1)}</p>\n//           <button className=\"prev\" onClick={prev}>Previous</button>\n//           <button className=\"next\" onClick={next}>Next</button>\n//           <div className=\"index\">{index+1} of {Questions.length} questions</div>\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Test;\n\nimport React, { useState, useEffect } from \"react\";\nimport './Test.css';\nimport { Questions } from \"./Questions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar ped;\nfunction predictWithMLModel(inputData) {\n  fetch('http://127.0.0.1:5000/predict', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(inputData)\n  }).then(response => response.json()).then(predictions => {\n    // Handle the predictions received from the Flask backend\n    ped = predictions;\n    console.log('Predictions: by heet ', predictions);\n  }).catch(error => {\n    console.error('Error:', error);\n  });\n  return ped;\n}\nconst inputData = [2, 100, 72, 100, 33.6, 50];\nfunction Test() {\n  _s();\n  predictWithMLModel(inputData);\n  const [index, setIndex] = useState(0);\n  const [question, setQuestion] = useState(Questions[index]);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [floatInput, setFloatInput] = useState(0);\n  const [result, setResult] = useState(false);\n  const [isAnswered, setIsAnswered] = useState(false);\n  const [dropdownValue, setDropdownValue] = useState(\"\"); // State to hold dropdown value\n\n  useEffect(() => {\n    setQuestion(Questions[index]);\n    setIsAnswered(false);\n    setSelectedAnswer(null);\n  }, [index]);\n  useEffect(() => {\n    setIndex(0);\n  }, []);\n  const checkAns = ans => {\n    setSelectedAnswer(ans);\n    setIsAnswered(true);\n  };\n  const handleFloatInput = e => {\n    setFloatInput(parseFloat(e.target.value));\n    setIsAnswered(true);\n  };\n  const handleDropdownChange = e => {\n    setDropdownValue(e.target.value);\n    setIsAnswered(true);\n  };\n  const reset = () => {\n    setIndex(0);\n    setSelectedAnswer(null);\n    setFloatInput(0);\n    setResult(false);\n    setDropdownValue(\"\"); // Reset dropdown value\n  };\n  const next = () => {\n    if (index === Questions.length - 1) {\n      setResult(true);\n      return;\n    }\n    setIndex(prevIndex => prevIndex + 1);\n  };\n  const prev = () => {\n    if (index > 0) {\n      setIndex(prevIndex => prevIndex - 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Diabetes Prediction Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this), result ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Test is submitted successfully\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Congrats you have diabetes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"with prob \", ped]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset\",\n        onClick: reset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: index === 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [index + 1, \". \", question.question]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: dropdownValue,\n          onChange: handleDropdownChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select an option\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 17\n          }, this), Object.keys(question).filter(key => key.startsWith(\"option\")).map((option, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: question[option],\n            children: question[option]\n          }, option, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"next\",\n          onClick: next,\n          disabled: !isAnswered,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"index\",\n          children: [index + 1, \" of \", Questions.length, \" questions\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [index + 1, \". \", question.question]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: Object.keys(question).filter(key => key.startsWith(\"option\")).map((option, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: selectedAnswer === i + 1 ? \"selected\" : \"\",\n            onClick: () => checkAns(i + 1),\n            children: question[option]\n          }, option, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"prev\",\n          onClick: prev,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"next\",\n          onClick: next,\n          disabled: !isAnswered,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"index\",\n          children: [index + 1, \" of \", Questions.length, \" questions\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 15\n        }, this), selectedAnswer !== null]\n      }, void 0, true)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 5\n  }, this);\n}\n_s(Test, \"5nJGEbD8hX+QKT6xd5LkilgOLdo=\");\n_c = Test;\nexport default Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","useState","useEffect","Questions","jsxDEV","_jsxDEV","Fragment","_Fragment","ped","predictWithMLModel","inputData","fetch","method","headers","body","JSON","stringify","then","response","json","predictions","console","log","catch","error","Test","_s","index","setIndex","question","setQuestion","selectedAnswer","setSelectedAnswer","floatInput","setFloatInput","result","setResult","isAnswered","setIsAnswered","dropdownValue","setDropdownValue","checkAns","ans","handleFloatInput","e","parseFloat","target","value","handleDropdownChange","reset","next","length","prevIndex","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","Object","keys","filter","key","startsWith","map","option","i","disabled","_c","$RefreshReg$"],"sources":["D:/project/firstapp/frontend/src/Test.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import './Test.css'\r\n// import { Questions } from \"./Questions\";\r\n\r\n// var ped;\r\n\r\n// function predictWithMLModel(inputData) {\r\n//   fetch('http://127.0.0.1:5000/predict', {\r\n//       method: 'POST',\r\n//       headers: {\r\n//           'Content-Type': 'application/json'\r\n//       },\r\n//       body: JSON.stringify(inputData)\r\n//   })\r\n//   .then(response => response.json())\r\n//   .then(predictions => {\r\n//       // Handle the predictions received from the Flask backend\r\n//       ped = predictions;\r\n//       console.log('Predictions: by heet ', predictions);\r\n//   })\r\n//   .catch(error => {\r\n//       console.error('Error:', error);\r\n//   });\r\n\r\n//   return ped;\r\n// }\r\n\r\n\r\n// const inputData = [2, 100, 72, 100, 33.6,50];\r\n\r\n// function Test() {\r\n//   predictWithMLModel(inputData);\r\n//   const [index, setIndex] = useState(0);\r\n//   const [question, setQuestion] = useState(Questions[index]);\r\n//   const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n//   const [floatInput, setFloatInput] = useState(0);\r\n//   const [result, setResult] = useState(false);\r\n//   const [isAnswered, setIsAnswered] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     setQuestion(Questions[index]);\r\n//     setIsAnswered(false);\r\n//     setSelectedAnswer(null);\r\n//   }, [index]);\r\n\r\n//   useEffect(() => {\r\n//     setIndex(0);\r\n//   }, []);\r\n\r\n//   const checkAns = (ans) => {\r\n//     setSelectedAnswer(ans);\r\n//     setIsAnswered(true);\r\n//   };\r\n\r\n//   const handleFloatInput = (e) => {\r\n//     setFloatInput(parseFloat(e.target.value));\r\n//     setIsAnswered(true); \r\n//   };\r\n\r\n//   const reset = () => {\r\n//     setIndex(0);\r\n//     setSelectedAnswer(null);\r\n//     setFloatInput(0);\r\n//     setResult(false);\r\n//   };\r\n\r\n//   const next = () => {\r\n\r\n//     if (index === Questions.length - 1) {\r\n//       setResult(true);\r\n//       return;\r\n//     }\r\n//     setIndex(prevIndex => prevIndex + 1);\r\n//   };\r\n\r\n//   const prev = () => {\r\n//     if (index > 0) {\r\n//       setIndex(prevIndex => prevIndex - 1);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h1>Diabetes Prediction Test</h1>\r\n//       <hr />\r\n//       {result ? (\r\n//         <>\r\n//           <h2>Test is submitted successfully</h2>\r\n//           <h2>Congrats you have diabetes</h2>\r\n//           <h2>with prob {ped}</h2>\r\n//           <button className=\"reset\" onClick={reset}>Reset</button>\r\n//         </>\r\n//       ) : (\r\n//         <>\r\n//           {index === 0 ? (\r\n//             <>\r\n//               <h2>{index+1}. {question.question}</h2>\r\n//               <input\r\n//                 type=\"range\"\r\n//                 min={0}\r\n//                 max={200}\r\n//                 step={0.1}\r\n//                 value={floatInput}\r\n//                 onChange={handleFloatInput}\r\n//               />\r\n//               <p>Value: {floatInput.toFixed(1)} kg</p>\r\n//               <button className=\"next\" onClick={next} disabled={!isAnswered}>Next</button>\r\n//               <div className=\"index\">{index+1} of {Questions.length} questions</div>\r\n//             </>\r\n//           ) : (\r\n//             <>\r\n//               <h2>{index+1}. {question.question}</h2>\r\n//               <ul>\r\n//                 {Object.keys(question).filter(key => key.startsWith(\"option\")).map((option, i) => (\r\n//                   <li\r\n//                     key={option}\r\n//                     className={selectedAnswer === i + 1 ? \"selected\" : \"\"}\r\n//                     onClick={() => checkAns(i + 1)}\r\n//                   >\r\n//                     {question[option]}\r\n//                   </li>\r\n//                 ))}\r\n//               </ul>\r\n//               <button className=\"prev\" onClick={prev}>Previous</button>\r\n//               <button className=\"next\" onClick={next} disabled={!isAnswered}>Next</button>\r\n//               <div className=\"index\">{index+1} of {Questions.length} questions</div>\r\n//               {selectedAnswer !== null }\r\n//             </>\r\n//           )}\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Test;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import './Test.css'\r\n// import { Questions } from \"./Questions\";\r\n\r\n// function Test() {\r\n//   const [index, setIndex] = useState(0);\r\n//   const [question, setQuestion] = useState(Questions[index]);\r\n//   const [sliderValue, setSliderValue] = useState(0);\r\n//   const [responses, setResponses] = useState([]);\r\n//   const [result, setResult] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     setQuestion(Questions[index]);\r\n//     setSliderValue(0); // Reset slider value when question changes\r\n//   }, [index]);\r\n\r\n//   const handleSliderChange = (e) => {\r\n//     setSliderValue(parseFloat(e.target.value));\r\n//   };\r\n\r\n//   const reset = () => {\r\n//     setIndex(0);\r\n//     setResponses([]);\r\n//     setResult(false);\r\n//   };\r\n\r\n//   const next = () => {\r\n//     if (index === Questions.length - 1) {\r\n//       setResult(true);\r\n//       // Send responses to Flask app\r\n//       fetch('http://127.0.0.1:5000/predict', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json'\r\n//         },\r\n//         body: JSON.stringify(responses)\r\n//       })\r\n//       .then(response => response.json())\r\n//       .then(predictions => {\r\n//         console.log('Predictions:', predictions);\r\n//         // Handle predictions\r\n//       })\r\n//       .catch(error => {\r\n//         console.error('Error:', error);\r\n//       });\r\n//       return;\r\n//     }\r\n//     setResponses(prevResponses => [...prevResponses, sliderValue]);\r\n//     setIndex(prevIndex => prevIndex + 1);\r\n//   };\r\n\r\n//   const prev = () => {\r\n//     if (index > 0) {\r\n//       setIndex(prevIndex => prevIndex - 1);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h1>Diabetes Prediction Test</h1>\r\n//       <hr />\r\n//       {result ? (\r\n//         <>\r\n//           <h2>Test is submitted successfully</h2>\r\n//           <button className=\"reset\" onClick={reset}>Reset</button>\r\n//         </>\r\n//       ) : (\r\n//         <>\r\n//           <h2>{index+1}. {question.question}</h2>\r\n//           <input\r\n//             type=\"range\"\r\n//             min={0}\r\n//             max={200}\r\n//             step={0.1}\r\n//             value={sliderValue}\r\n//             onChange={handleSliderChange}\r\n//           />\r\n//           <p>Value: {sliderValue.toFixed(1)}</p>\r\n//           <button className=\"prev\" onClick={prev}>Previous</button>\r\n//           <button className=\"next\" onClick={next}>Next</button>\r\n//           <div className=\"index\">{index+1} of {Questions.length} questions</div>\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Test;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport './Test.css'\r\nimport { Questions } from \"./Questions\";\r\n\r\nvar ped;\r\n\r\nfunction predictWithMLModel(inputData) {\r\n  fetch('http://127.0.0.1:5000/predict', {\r\n      method: 'POST',\r\n      headers: {\r\n          'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(inputData)\r\n  })\r\n  .then(response => response.json())\r\n  .then(predictions => {\r\n      // Handle the predictions received from the Flask backend\r\n      ped = predictions;\r\n      console.log('Predictions: by heet ', predictions);\r\n  })\r\n  .catch(error => {\r\n      console.error('Error:', error);\r\n  });\r\n\r\n  return ped;\r\n}\r\n\r\nconst inputData = [2, 100, 72, 100, 33.6, 50];\r\n\r\nfunction Test() {\r\n  predictWithMLModel(inputData);\r\n  const [index, setIndex] = useState(0);\r\n  const [question, setQuestion] = useState(Questions[index]);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [floatInput, setFloatInput] = useState(0);\r\n  const [result, setResult] = useState(false);\r\n  const [isAnswered, setIsAnswered] = useState(false);\r\n  const [dropdownValue, setDropdownValue] = useState(\"\"); // State to hold dropdown value\r\n\r\n  useEffect(() => {\r\n    setQuestion(Questions[index]);\r\n    setIsAnswered(false);\r\n    setSelectedAnswer(null);\r\n  }, [index]);\r\n\r\n  useEffect(() => {\r\n    setIndex(0);\r\n  }, []);\r\n\r\n  const checkAns = (ans) => {\r\n    setSelectedAnswer(ans);\r\n    setIsAnswered(true);\r\n  };\r\n\r\n  const handleFloatInput = (e) => {\r\n    setFloatInput(parseFloat(e.target.value));\r\n    setIsAnswered(true); \r\n  };\r\n\r\n  const handleDropdownChange = (e) => {\r\n    setDropdownValue(e.target.value);\r\n    setIsAnswered(true); \r\n  };\r\n\r\n  const reset = () => {\r\n    setIndex(0);\r\n    setSelectedAnswer(null);\r\n    setFloatInput(0);\r\n    setResult(false);\r\n    setDropdownValue(\"\"); // Reset dropdown value\r\n  };\r\n\r\n  const next = () => {\r\n\r\n    if (index === Questions.length - 1) {\r\n      setResult(true);\r\n      return;\r\n    }\r\n    setIndex(prevIndex => prevIndex + 1);\r\n  };\r\n\r\n  const prev = () => {\r\n    if (index > 0) {\r\n      setIndex(prevIndex => prevIndex - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Diabetes Prediction Test</h1>\r\n      <hr />\r\n      {result ? (\r\n        <>\r\n          <h2>Test is submitted successfully</h2>\r\n          <h2>Congrats you have diabetes</h2>\r\n          <h2>with prob {ped}</h2>\r\n          <button className=\"reset\" onClick={reset}>Reset</button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          {index === 0 ? (\r\n            <>\r\n              <h2>{index+1}. {question.question}</h2>\r\n              <select value={dropdownValue} onChange={handleDropdownChange}>\r\n                <option value=\"\">Select an option</option>\r\n                {Object.keys(question).filter(key => key.startsWith(\"option\")).map((option, i) => (\r\n                  <option key={option} value={question[option]}>{question[option]}</option>\r\n                ))}\r\n              </select>\r\n              <button className=\"next\" onClick={next} disabled={!isAnswered}>Next</button>\r\n              <div className=\"index\">{index+1} of {Questions.length} questions</div>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <h2>{index+1}. {question.question}</h2>\r\n              <ul>\r\n                {Object.keys(question).filter(key => key.startsWith(\"option\")).map((option, i) => (\r\n                  <li\r\n                    key={option}\r\n                    className={selectedAnswer === i + 1 ? \"selected\" : \"\"}\r\n                    onClick={() => checkAns(i + 1)}\r\n                  >\r\n                    {question[option]}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n              <button className=\"prev\" onClick={prev}>Previous</button>\r\n              <button className=\"next\" onClick={next} disabled={!isAnswered}>Next</button>\r\n              <div className=\"index\">{index+1} of {Questions.length} questions</div>\r\n              {selectedAnswer !== null }\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Test;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,YAAY;AACnB,SAASC,SAAS,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExC,IAAIC,GAAG;AAEP,SAASC,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}